[1mdiff --git a/Topicos Suplementares/Git/intro_git.Rmd b/Topicos Suplementares/Git/intro_git.Rmd[m
[1mindex 8d40101..c6b93f5 100644[m
[1m--- a/Topicos Suplementares/Git/intro_git.Rmd[m	
[1m+++ b/Topicos Suplementares/Git/intro_git.Rmd[m	
[36m@@ -280,8 +280,88 @@[m [mb <- 2 + a[m
 b-2[m
 ```[m
 [m
[31m-Agora, com a mudanÃ§a sendo percebida pelo Git vamos fazer:[m
[32m+[m[32mAgora, com a mudanÃ§a sendo percebida pelo Git vÃ¡ na aba Git, clique em commit e veja como as mudanÃ§as sÃ£o rastreadas pelo Git. VocÃª pode fazer o commit por nessa janela mesmo, ou pode fazer pelo Terminal da seguinte forma:[m
 [m
[32m+[m[32m```{bash}[m
[32m+[m[32mgit commit -m "Adicionando 3a linha em script_exemplo"[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mVocÃª pode ver o seu histÃ³rico de commits clicando no Ã­cone de relÃ³gio na aba Git.[m
[32m+[m
[32m+[m[32m## Push[m
[32m+[m
[32m+[m[32mAtÃ© agora, vocÃª fez os commits para rastrear as alteraÃ§Ãµes que vocÃª fez no seu projeto. PorÃ©m se vocÃª entrar agora na pÃ¡gina do repositorio no Github vocÃª vai ver que nada mudou. Isso porque vocÃª fez tudo localmente. Para fazer o repositorio Git remoto (do Github) ficar igual o seu local (do seu PC), vocÃª deve dar um push ( _empurrÃ£o_). VocÃª pode apertar a seta **verde** na aba Git ou entÃ£o dar o comando no terminal:[m
[32m+[m
[32m+[m[32m```{bash}[m
[32m+[m[32mgit push[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mTrabalhando em equipe, Ã© de bom tom que sempre que vocÃª terminar o seu trabalho do dia dÃª um commit final e um push para que o outro saiba o que fez.[m
[32m+[m
[32m+[m[32mDepois de dado o push, vÃ¡ na pÃ¡gina do seu repositÃ³rio no Github para conferir se houve modificaÃ§Ãµes. Se deu tudo certo, vocÃª deve esperar modificaÃ§Ãµes sim. Repare que na lista dos arquivos, as mensagens do Ãºltimo commit que vocÃª deu referente a cada arquivo aparecem do lado destes. Ou seja, do lado de `git_exemplo.Rproj` e `script_exemplo.R` vocÃª tem, respectivamente as mensagens "Criando os arquivos iniciais do R apÃ³s conectar o RStudio com o Github." e "Adicionando terceira linha em script_exemplo". Repare que vocÃª pode clicar tanto no arquivo quanto na mensagem do commit (para visualizar o que ocorreu).[m
[32m+[m
[32m+[m[32mNa pagina inicial do repositorio tambÃ©m tem o nÃºmero de commits que vocÃª deu nele que Ã© um link para o seu histÃ³rico de commits.[m
[32m+[m
[32m+[m
[32m+[m[32m## Pull[m
[32m+[m
[32m+[m[32mPor se tratar de um repositorio remoto pode ocorrer situaÃ§Ãµes em que vocÃª quer igualar o seu repositorio local ao remoto e nÃ£o o contrario. Motivos para isso podem ser:[m
[32m+[m
[32m+[m[32m - VocÃª trabalhou de outro computador no repositorio remoto e agora o seu repositorio local estÃ¡ defasado frente ao seu trabalho  (que vocÃª colocou no repositorio remoto);[m
[32m+[m[41m [m
[32m+[m[32m - VocÃª estÃ¡ trabalhando em equipe e quer atualizar o seu repositorio local com as mudanÃ§as feitas pelos seus colegas.[m
[32m+[m
[32m+[m[32mNo caso do segundo, Ã© bom  que sempre que vocÃª vÃ¡ comeÃ§ar uma nova jornada de trabalho vocÃª dÃª um pull (sendo que vocÃª deu um commit antes de ir dormir) para trabalhar sobre a versÃ£o mais recente do trabalho de todos.[m
[32m+[m
[32m+[m[32mPara dar um pull basta que vocÃª aperte a seta azul na aba Git ou dÃª o seguinte comando no Terminal:[m
[32m+[m
[32m+[m[32m```{bash}[m
[32m+[m[32mgit pull[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mNo caso do exemplo que estamos dando aqui, vamos receber a resposta de que estÃ¡ tudo atualizado. Para ver como ocorre, crie um arquivo dÃª o upload num arquivo qualquer no seu repositorio Git. Para tanto basta clicar no botÃ£o `Add file` e ou criar um arquivo ou upar um. Com o arquivo adicionado, ao usar o comando `git pull` no terminal aparecerÃ¡ uma mensagem sumarizando as modificaÃ§Ãµes dos arquivos e quais arquivos novos tem.[m
[32m+[m
[32m+[m[32m## Rotina do Git- sem ramificaÃ§Ã£o (multiplos  _branches_)[m
[32m+[m
[32m+[m[32mAgora vocÃª aprendeu os quatro comandos mais bÃ¡sicos e essenciais do git: add, commit, push e pull. PorÃ©m, qual Ã© um bom uso que vocÃª deve dar a eles na sua rotina do dia a dia? Importante notar que o que estÃ¡ aqui sÃ£o dicas e nÃ£o leis sagradas. NÃ£o precisa se matar para cumprir tudo a risco. PorÃ©m, o hÃ¡bito faz o monge.[m
[32m+[m
[32m+[m[32mEm primeiro lugar, **procure sempre fazer boas mensagens de commit**. NÃ£o precisam ser imensas, mas elas devem servir para identificar mais ou menos o que vocÃª estava trabalhando. Bons exemplos de commits podem ser coisas como "corrigindo a leitura da base de dados", "criando funÃ§Ãµes basicas", "adicionando slides", "corrigindo erros de gramatica" e etc... Mensagens ruins seriam coisas como "mexi em algumas coisas", "aa", "adicionei linhas" e etc... PorÃ©m, nÃ£o se martirize para criar excelentes mensagens. Se nÃ£o vier, tente escrever sobre algo que vocÃª fez e tÃ¡ valendo.[m
[32m+[m
[32m+[m[32mEm segundo lugar, tente dar commits em blocos que fazem sentido. Ou seja, dÃª um commit se vocÃª revisou uma parte especifica do seu cÃ³digo (como por exemplo a seleÃ§Ã£o de variÃ¡veis). Isso inclusive vai facilitar sua vida na hora de pensar nas mensagens.[m
[32m+[m
[32m+[m[32mEm terceiro lugar, vocÃª nÃ£o precisa por outro lado dar um commit por linha modificada. Existe um meio termo Ã³timo entre o cÃ©u e o inferno.[m
[32m+[m
[32m+[m[32mPor fim, em termos de trabalho individual, Ã© que vocÃª nÃ£o precisa dar um push para cada commit que vocÃª fizer. NÃ£o deixe de atualizar o seu repositorio remoto sempre que der.[m
[32m+[m
[32m+[m[32m### Quando trabalhando em equipe[m
[32m+[m
[32m+[m[32mSe vocÃª estiver trabalhando em equipe as alteraÃ§Ãµes que vocÃª e seus colegas fizerem podem sobrepor uma a outra e ser um desastre. Para isso servem mÃºltiplos branches (que falaremos mais a frente), mas algumas boas prÃ¡ticas jÃ¡ ajudam em muitas questÃµes.[m
[32m+[m
[32m+[m[32mQuando estiver trabalhando em equipe no Git (sem branches) Ã© sempre pensar que o repositorio estÃ¡ modificado. Assim, vocÃª deve sempre fazer algumas medidas de seguranÃ§a. A primeira coisa Ã© sempre dar um pull toda vez que comeÃ§ar a trabalhar. **Importante dizer** que isso pressupÃµe que vocÃª colocou no repositorio remoto tudo que vocÃª fez no local.[m
[32m+[m
[32m+[m[32mA segunda coisa a se atentar quando estiver trabalhando em equipe Ã© a ordem entre o commit, pull e push. A depender das mudanÃ§as que os seus colegas colocaram no repositÃ³rio, quando vocÃª der push, vocÃª pode criar uma sÃ©rie de erros. Por outro lado, se vocÃª der o Pull inadvertidamente pode perder tudo o que vocÃª fez. Por isso Ã© importante que vocÃª siga a seguinte ordem ao dar um push:[m
[32m+[m
[32m+[m[32m```{bash}[m
[32m+[m[32mgit Add -A[m
[32m+[m[32mgit commit -m "A mensagem a ser dada"[m
[32m+[m[32mgit pull[m
[32m+[m[32mgit push[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mSe vocÃª deu um commit antes de dar o pull, o seu git irÃ¡ manter no seu repositorio local as mudanÃ§as que vocÃª fez ao longo do tempo. E como vocÃª vai ter no seu repositorio local todas as modificaÃ§Ãµes que os seus colegas fizeram (por conta do pull), o seu push dificilmente darÃ¡ erro. Pode no entanto ocorrer, especialmente se vocÃª e seu colega estiverem mexendo no mesmo arquivo no mesmo intervalo de tempo.[m
[32m+[m
[32m+[m[32mPara nÃ£o deixar de falar o Ã³bvio: evite a todo custo mexer ao mesmo tempo e no mesmo arquivo que o seu colega estÃ¡ mexendo.[m
[32m+[m
[32m+[m[32mPor fim, apesar de ser melhor commits facilmente identificados por tÃ³pico, sempre dÃª um commit e um push no fim da sua jornada de trabalho. Seja Ã s 4 da tarde ou as 3 da madrugada, seu colega pode pegar isso no dia seguinte e acabar mexendo num arquivo que vocÃª tambÃ©m mexeu no dia anterior, mas como vocÃª nÃ£o deu push, pode dar problema quando os dois derem lÃ¡ na frente.[m
[32m+[m
[32m+[m[32m## Multiplos Branches[m
[32m+[m
[32m+[m[32mNÃ³s acabamos de dar dicas sobre como trabalhar em equipe sem multiplos branches, mas em trabalhos muito grandes e de muitas atividades em paralelo pode ser dificil seguir a risca algumas daquelas prÃ¡ticas. Especialmente em trabalhos que podem envolver mais de 5 pessoas. Por isso, pode ser interessante ramificar o seu repositÃ³rio. Isso quer dizer criar vÃ¡rias versÃµes dele. VocÃª pode criar um ramo do seu repositorio muito facilmente, basta[m[41m [m
[32m+[m
[32m+[m
[32m+[m[32m```{bash}[m
[32m+[m[32mpush -u origin teste[m
[32m+[m[32m```[m
 [m
 [m
 ## Comandos Git para commit[m
[1mdiff --git a/Topicos Suplementares/Git/intro_git.html b/Topicos Suplementares/Git/intro_git.html[m
[1mindex d32bf8e..f77d82b 100644[m
[1m--- a/Topicos Suplementares/Git/intro_git.html[m	
[1m+++ b/Topicos Suplementares/Git/intro_git.html[m	
[36m@@ -525,7 +525,55 @@[m [mb &lt;- 2 + a</code></pre>[m
 <pre class="r"><code>a &lt;- 2[m
 b &lt;- 2 + a[m
 b-2</code></pre>[m
[31m-<p>Agora, com a mudanÃ§a sendo percebida pelo Git vamos fazer:</p>[m
[32m+[m[32m<p>Agora, com a mudanÃ§a sendo percebida pelo Git vÃ¡ na aba Git, clique em commit e veja como as mudanÃ§as sÃ£o rastreadas pelo Git. VocÃª pode fazer o commit por nessa janela mesmo, ou pode fazer pelo Terminal da seguinte forma:</p>[m
[32m+[m[32m<pre class="bash"><code>git commit -m &quot;Adicionando 3a linha em script_exemplo&quot;</code></pre>[m
[32m+[m[32m<p>VocÃª pode ver o seu histÃ³rico de commits clicando no Ã­cone de relÃ³gio na aba Git.</p>[m
[32m+[m[32m</div>[m
[32m+[m[32m<div id="push" class="section level2">[m
[32m+[m[32m<h2>Push</h2>[m
[32m+[m[32m<p>AtÃ© agora, vocÃª fez os commits para rastrear as alteraÃ§Ãµes que vocÃª fez no seu projeto. PorÃ©m se vocÃª entrar agora na pÃ¡gina do repositorio no Github vocÃª vai ver que nada mudou. Isso porque vocÃª fez tudo localmente. Para fazer o repositorio Git remoto (do Github) ficar igual o seu local (do seu PC), vocÃª deve dar um push ( <em>empurrÃ£o</em>). VocÃª pode apertar a seta <strong>verde</strong> na aba Git ou entÃ£o dar o comando no terminal:</p>[m
[32m+[m[32m<pre class="bash"><code>git push</code></pre>[m
[32m+[m[32m<p>Trabalhando em equipe, Ã© de bom tom que sempre que vocÃª terminar o seu trabalho do dia dÃª um commit final e um push para que o outro saiba o que fez.</p>[m
[32m+[m[32m<p>Depois de dado o push, vÃ¡ na pÃ¡gina do seu repositÃ³rio no Github para conferir se houve modificaÃ§Ãµes. Se deu tudo certo, vocÃª deve esperar modificaÃ§Ãµes sim. Repare que na lista dos arquivos, as mensagens do Ãºltimo commit que vocÃª deu referente a cada arquivo aparecem do lado destes. Ou seja, do lado de <code>git_exemplo.Rproj</code> e <code>script_exemplo.R</code> vocÃª tem, respectivamente as mensagens âCriando os arquivos iniciais do R apÃ³s conectar o RStudio com o Github.â e âAdicionando terceira linha em script_exemploâ. Repare que vocÃª pode clicar tanto no arquivo quanto na mensagem do commit (para visualizar o que ocorreu).</p>[m
[32m+[m[32m<p>Na pagina inicial do repositorio tambÃ©m tem o nÃºmero de commits que vocÃª deu nele que Ã© um link para o seu histÃ³rico de commits.</p>[m
[32m+[m[32m</div>[m
[32m+[m[32m<div id="pull" class="section level2">[m
[32m+[m[32m<h2>Pull</h2>[m
[32m+[m[32m<p>Por se tratar de um repositorio remoto pode ocorrer situaÃ§Ãµes em que vocÃª quer igualar o seu repositorio local ao remoto e nÃ£o o contrario. Motivos para isso podem ser:</p>[m
[32m+[m[32m<ul>[m
[32m+[m[32m<li><p>VocÃª trabalhou de outro computador no repositorio remoto e agora o seu repositorio local estÃ¡ defasado frente ao seu trabalho (que vocÃª colocou no repositorio remoto);</p></li>[m
[32m+[m[32m<li><p>VocÃª estÃ¡ trabalhando em equipe e quer atualizar o seu repositorio local com as mudanÃ§as feitas pelos seus colegas.</p></li>[m
[32m+[m[32m</ul>[m
[32m+[m[32m<p>No caso do segundo, Ã© bom que sempre que vocÃª vÃ¡ comeÃ§ar uma nova jornada de trabalho vocÃª dÃª um pull (sendo que vocÃª deu um commit antes de ir dormir) para trabalhar sobre a versÃ£o mais recente do trabalho de todos.</p>[m
[32m+[m[32m<p>Para dar um pull basta que vocÃª aperte a seta azul na aba Git ou dÃª o seguinte comando no Terminal:</p>[m
[32m+[m[32m<pre class="bash"><code>git pull</code></pre>[m
[32m+[m[32m<p>No caso do exemplo que estamos dando aqui, vamos receber a resposta de que estÃ¡ tudo atualizado. Para ver como ocorre, crie um arquivo dÃª o upload num arquivo qualquer no seu repositorio Git. Para tanto basta clicar no botÃ£o <code>Add file</code> e ou criar um arquivo ou upar um. Com o arquivo adicionado, ao usar o comando <code>git pull</code> no terminal aparecerÃ¡ uma mensagem sumarizando as modificaÃ§Ãµes dos arquivos e quais arquivos novos tem.</p>[m
[32m+[m[32m</div>[m
[32m+[m[32m<div id="rotina-do-git--sem-ramificaÃ§Ã£o-multiplos-branches" class="section level2">[m
[32m+[m[32m<h2>Rotina do Git- sem ramificaÃ§Ã£o (multiplos <em>branches</em>)</h2>[m
[32m+[m[32m<p>Agora vocÃª aprendeu os quatro comandos mais bÃ¡sicos e essenciais do git: add, commit, push e pull. PorÃ©m, qual Ã© um bom uso que vocÃª deve dar a eles na sua rotina do dia a dia? Importante notar que o que estÃ¡ aqui sÃ£o dicas e nÃ£o leis sagradas. NÃ£o precisa se matar para cumprir tudo a risco. PorÃ©m, o hÃ¡bito faz o monge.</p>[m
[32m+[m[32m<p>Em primeiro lugar, <strong>procure sempre fazer boas mensagens de commit</strong>. NÃ£o precisam ser imensas, mas elas devem servir para identificar mais ou menos o que vocÃª estava trabalhando. Bons exemplos de commits podem ser coisas como âcorrigindo a leitura da base de dadosâ, âcriando funÃ§Ãµes basicasâ, âadicionando slidesâ, âcorrigindo erros de gramaticaâ e etcâ¦ Mensagens ruins seriam coisas como âmexi em algumas coisasâ, âaaâ, âadicionei linhasâ e etcâ¦ PorÃ©m, nÃ£o se martirize para criar excelentes mensagens. Se nÃ£o vier, tente escrever sobre algo que vocÃª fez e tÃ¡ valendo.</p>[m
[32m+[m[32m<p>Em segundo lugar, tente dar commits em blocos que fazem sentido. Ou seja, dÃª um commit se vocÃª revisou uma parte especifica do seu cÃ³digo (como por exemplo a seleÃ§Ã£o de variÃ¡veis). Isso inclusive vai facilitar sua vida na hora de pensar nas mensagens.</p>[m
[32m+[m[32m<p>Em terceiro lugar, vocÃª nÃ£o precisa por outro lado dar um commit por linha modificada. Existe um meio termo Ã³timo entre o cÃ©u e o inferno.</p>[m
[32m+[m[32m<p>Por fim, em termos de trabalho individual, Ã© que vocÃª nÃ£o precisa dar um push para cada commit que vocÃª fizer. NÃ£o deixe de atualizar o seu repositorio remoto sempre que der.</p>[m
[32m+[m[32m<div id="quando-trabalhando-em-equipe" class="section level3">[m
[32m+[m[32m<h3>Quando trabalhando em equipe</h3>[m
[32m+[m[32m<p>Se vocÃª estiver trabalhando em equipe as alteraÃ§Ãµes que vocÃª e seus colegas fizerem podem sobrepor uma a outra e ser um desastre. Para isso servem mÃºltiplos branches (que falaremos mais a frente), mas algumas boas prÃ¡ticas jÃ¡ ajudam em muitas questÃµes.</p>[m
[32m+[m[32m<p>Quando estiver trabalhando em equipe no Git (sem branches) Ã© sempre pensar que o repositorio estÃ¡ modificado. Assim, vocÃª deve sempre fazer algumas medidas de seguranÃ§a. A primeira coisa Ã© sempre dar um pull toda vez que comeÃ§ar a trabalhar. <strong>Importante dizer</strong> que isso pressupÃµe que vocÃª colocou no repositorio remoto tudo que vocÃª fez no local.</p>[m
[32m+[m[32m<p>A segunda coisa a se atentar quando estiver trabalhando em equipe Ã© a ordem entre o commit, pull e push. A depender das mudanÃ§as que os seus colegas colocaram no repositÃ³rio, quando vocÃª der push, vocÃª pode criar uma sÃ©rie de erros. Por outro lado, se vocÃª der o Pull inadvertidamente pode perder tudo o que vocÃª fez. Por isso Ã© importante que vocÃª siga a seguinte ordem ao dar um push:</p>[m
[32m+[m[32m<pre class="bash"><code>git Add -A[m
[32m+[m[32mgit commit -m &quot;A mensagem a ser dada&quot;[m
[32m+[m[32mgit pull[m
[32m+[m[32mgit push</code></pre>[m
[32m+[m[32m<p>Se vocÃª deu um commit antes de dar o pull, o seu git irÃ¡ manter no seu repositorio local as mudanÃ§as que vocÃª fez ao longo do tempo. E como vocÃª vai ter no seu repositorio local todas as modificaÃ§Ãµes que os seus colegas fizeram (por conta do pull), o seu push dificilmente darÃ¡ erro. Pode no entanto ocorrer, especialmente se vocÃª e seu colega estiverem mexendo no mesmo arquivo no mesmo intervalo de tempo.</p>[m
[32m+[m[32m<p>Para nÃ£o deixar de falar o Ã³bvio: evite a todo custo mexer ao mesmo tempo e no mesmo arquivo que o seu colega estÃ¡ mexendo.</p>[m
[32m+[m[32m<p>Por fim, apesar de ser melhor commits facilmente identificados por tÃ³pico, sempre dÃª um commit e um push no fim da sua jornada de trabalho. Seja Ã s 4 da tarde ou as 3 da madrugada, seu colega pode pegar isso no dia seguinte e acabar mexendo num arquivo que vocÃª tambÃ©m mexeu no dia anterior, mas como vocÃª nÃ£o deu push, pode dar problema quando os dois derem lÃ¡ na frente.</p>[m
[32m+[m[32m</div>[m
[32m+[m[32m</div>[m
[32m+[m[32m<div id="multiplos-branches" class="section level2">[m
[32m+[m[32m<h2>Multiplos Branches</h2>[m
[32m+[m[32m<p>NÃ³s acabamos de dar dicas sobre como trabalhar em equipe sem multiplos branches, mas em trabalhos muito grandes e de muitas atividades em paralelo pode ser dificil seguir a risca algumas daquelas prÃ¡ticas. Especialmente em trabalhos que podem envolver mais de 5 pessoas. Por isso, pode ser interessante ramificar o seu repositÃ³rio. Isso quer dizer criar vÃ¡rias versÃµes dele. VocÃª pode criar um ramo do seu repositorio muito facilmente, basta</p>[m
[32m+[m[32m<pre class="bash"><code>push -u origin teste</code></pre>[m
 </div>[m
 <div id="comandos-git-para-commit" class="section level2">[m
 <h2>Comandos Git para commit</h2>[m
